continue
params.require(:video_memory)[params[:video_memory].keys[0]]continue
params.require(:video_memory)[params[:video_memory].keys[0]]
params.require(:video_memory).permit(params[:video_memory])
params[:video_memory]
params.require(:video_memory).keys[0]
params.require(:video_memory)
params.require(:video_memory)[keys[0]]
params.require(:video_memory)[:keys[0]]
params.require(:video_memory).keys[0]
params.require(:video_memory).keys
params.require(:video_memory)
params.video_memory
params.video_memory_param
params.keys
video_memory_params
params
params.key? :video_memory
continue
format.js
format
continue
respond_to do |format|
;
respond_to do |format|
respond_to |format| do
respond_to do |format|
   83:     end
   82:       format.js
respond_to do |format|
@memcard.errors
continue
@memcard
@memcard.update_attributes(video_memory: params.require(:video_memory)[:"{:accept=>%22video/*"])
video_memory_params.permit(:"{:accept=>%22video/*")@memcard.update_attributes(video_memory: video_memory_params)
video_memory_params[:"{:accept=>%22video/*"]
video_memory_params
params
continue
params
continue
params
video_memory_params
continue
params.require(:memory_card).permit(:video_memory)
params.require(:memory_card).permit(:video_card)
video_memory_params
continue
video_memory_params
continue
StringIO.new(Base64.decode64(video_memory_params))
video_memory_params
@memcard.update_attributes(video_memory: video_memory_params)
video_memory_params
continue
@memcard.update_attributes(video_memory: video_memory_params)
params[:video_memory]
video_memory_params
continue
 @memcard.update_attributes(contvideo_memory: params[:video_memory])
 @memcard.update_attributes(video_memory: video_memory_params)
video_memory_params
continue
video_memory_params
q
continue
 @memcard.update_attributes(video_memory: params.require(:video_memory))
video_memory_params
@memcard.video_memory
@memcard
@memcard.save
@memcard
 @memcard.update_attributes(video_memory_params)
params.key? :video_memory
continue
@memcard
@memcard.save
@memcard
@memcard.update_attributes(params.require(:video_memory).permit(:video_memory_file_name, :video_memory_content_type, :video_memory_file_size)
@memcard.errors
@memcard.update_attributes(params[:video_memory])
@memcard.update_attribute(:video_memory, params.require(:video_memory))
@memcard.update_attribute(:video_memory => params.require(:video_memory))
@memcard.update_attributes({params.require(:video_memory)})
@memcard.update_attributes({:video_memory => params.require(:video_memory)})
{:video_memory => params.require(:video_memory)}
params.require(:video_memory)
params.permit(:video_memory)
params
params.require(:memory_card).permit(:video_memory)
continue
params
params.require(:memory_card).permit(:video_memory)
params.require(:video_memory).permit
params.require(:video_memory).permit(:user)
a = video_memory_params
params.require(:video_memory)
params.keys
@memcard.update_attributes(params.require(:video_memory))
params.require(:video_memory)
a
a = video_memory_params
a
a = params.key? :video_memory
video_memory_params
continue
params[:memory_card][:video_memory].keys
params[:memory_card][:video_memory]
params[:memory_card].video_memory
params[:memory_card].keys
params[:memory_card]
params.keys
params
continue
params[:video_memory].keys
params[:video_memory]
params.video_memory.keys
params.keys
params
continue
params.keys
video_memory_params
params
video_memory_params.present?
@memcard.video_memory
@memcard
continue
video_memory_params
continue
params
video_memory_params
continue
video_memory_params
params
continue
expect(field_checked).to be_nil
field_checked.should be_nil
assert field_checked.nil?
assert true
asser true
field_checked == nil
continue
field_checked
continue
contineu
@user.save
@user
user_params
